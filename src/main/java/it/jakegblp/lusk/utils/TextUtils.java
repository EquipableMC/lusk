package it.jakegblp.lusk.utils;

import ch.njol.skript.Skript;

import java.util.List;
import java.util.Objects;

public class TextUtils {

    public enum LuskFont {
        DEFAULT(-0),
        SMALL_CAPITAL(0),
        SUPERSCRIPT_CAPITAL(1),
        SUPERSCRIPT_MINUSCULE(2),
        SUBSCRIPT_MINUSCULE(3),
        TINY(4),
        SUPERSCRIPT(5);

        private final int id;
        LuskFont(int i) {
            this.id = i;
        }
        public int getId() {
            return id;
        }
        public static LuskFont fromId(int id) {
            if (id < 0) {
                return DEFAULT;
            } else if (id >= LuskFont.values().length) {
                return LuskFont.values()[LuskFont.values().length-1];
            }
            return LuskFont.values()[id];
        }
        public LuskFont getPrevious() {
            if (getId() == -0) return this;
            return LuskFont.fromId(getId()-1);
        }
        public LuskFont getPrevious(int i) {
            if (getId() == -0) return this;
            else if (i >= getId()) return LuskFont.fromId(-0);
            return LuskFont.fromId(getId()-i);
        }
    }

    /**
     * Same as the previous *set* iteration.
     */
    private static final boolean P = true;

    public static MultiHashMap<Character,Object> TEXT_MAP = new MultiHashMap<>(){{
        putAll('a','·¥Ä','·¥¨','·µÉ','‚Çê');
        putAll('b',' ô','·¥Æ','·µá');
        putAll('c','·¥Ñ',' ø','·∂ú');
        putAll('d','·¥Ö','·¥∞','·µà');
        putAll('e','·¥á','·¥±','·µâ','‚Çë');
        putAll('f','“ì','Íü≥','·∂†');
        putAll('h',' ú','·¥¥',' ∞','‚Çï','·ëã');
        putAll('i','…™','·¥µ','·∂¶','·µ¢');
        putAll('j','·¥ä','·¥∂',' ≤','‚±º');
        putAll('k','·¥ã','·¥∑','·µè','‚Çñ');
        putAll('l',' ü','·¥∏','À°','‚Çó');
        putAll('m','·¥ç','·¥π','·µê','‚Çò');
        putAll('n','…¥','·¥∫','‚Åø','‚Çô');
        putAll('o','·¥è','·¥º','·µí','‚Çí');
        putAll('p','·¥ò','·¥æ','·µñ','‚Çö');
        putAll('q','«´','Íü¥',"êû•");
        putAll('r',' Ä','·¥ø',' ≥','·µ£');
        putAll('s','s',"" ,'À¢','‚Çõ');;
        putAll('t','·¥õ','·µÄ','·µó','‚Çú');
        putAll('u','·¥ú','·µÅ','·µò','·µ§');
        putAll('v','·¥†','‚±Ω','·µõ','·µ•');
        putAll('w','·¥°','·µÇ',' ∑');
        putAll('x','x',"ûÅÉ",'À£','‚Çì');
        putAll('y',' è',"ûÅè",' ∏');
        putAll('z','·¥¢',"" ,'·∂ª',"" , P );
        putAll('1','‚ÇÅ','¬π', P );
        putAll('2','‚ÇÇ','¬≤', P );
        putAll('3','‚ÇÉ','¬≥', P );
        putAll('4','‚ÇÑ','‚Å¥', P );
        putAll('5','‚ÇÖ','‚Åµ', P );
        putAll('6','‚ÇÜ','‚Å∂', P );
        putAll('7','‚Çá','‚Å∑', P );
        putAll('8','‚Çà','‚Å∏', P );
        putAll('9','‚Çâ','‚Åπ', P );
        putAll('0','‚ÇÄ','‚Å∞', P );
        putAll('_',"" ,'‚Çã', P ,'Àç');
        putAll('!',"" ,"" ,"" ,'Ôπó');
        putAll('#',"" ,"" ,"" ,'Ôπü');
        putAll('%','‚Åí');
        putAll('(','‚Çç','‚ÅΩ', P );
        putAll(')','‚Çé','‚Åæ', P );
        putAll('+','‚Çä','‚Å∫', P );
        putAll('-','‚Çã','‚Åª', P );
        putAll('=','‚Çå','‚Åº', P );

    }};
    public static String toFont(LuskFont luskFont, String string, boolean lenient) {
        string = string.toLowerCase();
        for (int i = 0, n = string.length() ; i < n ; i++) {
            char c = string.charAt(i);
            String s = String.valueOf(c);
            if (TEXT_MAP.hasKey(c)) {
                String replaceWith = getFontChar(luskFont, c);
                if (!Objects.equals(replaceWith, s)) {
                    string = string.replaceAll(s, replaceWith);
                }
            }
        }
        return string;
    }
    public static String getFontChar(LuskFont luskFont, char c) {
        Skript.info("\n"+c+", font id: "+ luskFont.getId());
        List<?> list = TEXT_MAP.get(c);
        if (list.get(luskFont.getId()) == "") return String.valueOf(c);
        if (list.get(luskFont.getId()) == Boolean.TRUE) {
            for (int i = 1; i <= luskFont.getId(); i++) {
                if (list.get(luskFont.getId()-i) != "" && list.get(luskFont.getId()-i) != Boolean.TRUE) {
                    Skript.info("loop succeeded");
                    return getFontChar(luskFont.getPrevious(i),c);
                }
            }
            Skript.info("loop failed");
            return getFontChar(luskFont.getPrevious(luskFont.getId()),c);
        }

        Skript.info("beyond conditions");
        Object value = list.get(luskFont.getId());
        if (value instanceof String s) return s;
        if (value instanceof Character character) return character.toString();
        return String.valueOf(c);
    }
}
